var w=require("path"),x=require("react"),q=require("node:fs/promises"),H=require("html-minifier"),M=require("react-dom/server"),{minify:N}=H,{renderToString:C}=M,{readFile:k,writeFile:A,cp:$,readdir:D,rm:G}=q,J=process.cwd(),R=t=>typeof t=="string"&&t.length>0,m=t=>R(t)?`${J}${t}`:null,f=(t,e)=>R(t)?`${e}${t}`:null;module.exports=(t={})=>{let e=m(t.outDir);if(!e)throw new Error("Must specify out directory");let n=m(t.cssFrom),s=m(t.htmlFrom),r=m(t.assetsFrom),a=f(t.jsOut,e),o=f(t.cssOut,e),c=f(t.htmlOut,e),u=f(t.assetsOut,e),g=t.galleries?.length?t.galleries:null,E=t.redux||{store:null,Provider:null},p=[];return{name:"reactHydrationPlugin",setup:y=>{y.onStart(async()=>{await L(e);let l=u||r;p=await U(s,c,l),u&&r&&await $(r,u,{recursive:!0}),o&&n&&await $(n,o,{recursive:!0}),l&&g&&await nt(g,l)}),y.onLoad({filter:/\.static.jsx$/},l=>{let d=l.path,i=Z(d),F=`id="${i}">`,S=`data-${i}=`;for(let O of p){let{content:j,path:b}=O;if(!j.includes(F))continue;let T={redux:E,attrId:F,content:j,attrData:S,componentPath:d,suffix:l.suffix};O.content=z(T),console.log("Component:",i),console.log("Injected in:",b),console.log("-------------------------------------------"),console.log("-------------------------------------------")}return{loader:"jsx"}}),y.onEnd(async()=>{let l=await h(a,"js"),d=await h(o||n,"css");for(let i of p)i.content=Y(d,i.path,i.content),i.content=V(l,i.path,i.content),await A(i.path,i.content)})}}};var L=async t=>{try{await G(t,{recursive:!0,force:!0})}catch(e){logError(`removeFile : ${e.message}`)}},U=async(t,e,n)=>{let s=[];try{if(!t||!e)throw new Error("Must specify html entry & out directory");await $(t,e,{recursive:!0});let r=await h(e,"html");s=await W(r,n)}catch(r){console.error("getPages - Can't get html outputs paths:",r.message)}finally{return s}},h=async(t,e)=>{if(!t)return[];let n=await D(t,{withFileTypes:!0}),s=await Promise.all(n.map(r=>{let a=w.resolve(t,r.name);return r.isDirectory()?h(a,e):a}));return Array.prototype.concat(...s).filter(r=>r.includes(`.${e}`))},W=async(t,e)=>{let n=[];try{let s=t.map(async r=>new Promise((a,o)=>{k(r,"utf8").then(c=>{c||o(`readPages - cannot read file at path ${r}`);let u=N(c,{caseSensitive:!0,collapseWhitespace:!0,conservativeCollapse:!0}),g=_(e,r,u);a({path:r,content:g})}).catch(c=>o(c))}));n=await Promise.all(s)}catch(s){console.error("readPages - cannot read files",s.message)}finally{return n}},V=(t,e,n)=>{let s="<!-- {scripts} -->",a=t.map(o=>v(o,e)).map(Q).reduce((o,c)=>`${o}${c}`,"");return P(n,s,a)},Y=(t,e,n)=>{let s="<!-- {styles} -->",a=t.map(o=>v(o,e)).map(K).reduce((o,c)=>`${o}${c}`,"");return P(n,s,a)},_=(t,e,n)=>{let s="{assets}",r=t?v(t,e):".";return B(n,r,s)},B=(t,e,n)=>{let s=t;for(;s.includes(n);)s=P(s,n,e);return s},P=(t,e,n)=>{let s=t.indexOf(e);if(s<0)return t;let r=s+e.length,a=t.substring(0,s),o=t.substring(r);return`${a}${n}${o}`},K=t=>`<link rel="stylesheet" href="${t}">`,Q=t=>`<script defer async src="${t}"></script>`,v=(t,e)=>{let n=I(e,t),s=X(n.length),r=I(t,e);return[s,...r].join("/")},I=(t,e)=>{let n=t.split("/"),s=e.split("/");return n.reduce((r,a,o)=>s[o]===a?[...r]:[...r,a],[])},X=t=>{let e=t-1;if(e===0)return".";let n="";for(let s=0;s<e;s++)n+="../";return n.slice(0,-1)},Z=t=>{let e=w.basename(t,w.extname(t)),n=e.substring(0,e.indexOf(".static"));return`${n.slice(0,1).toLowerCase()}${n.slice(1)}`},z=t=>{let{content:e,attrData:n,attrId:s,componentPath:r,suffix:a,redux:o}=t,c=e.indexOf(s);if(c<0)return e;let u=tt(e,c,n),g=et(r,u,a,o);return st(g,e,c,s.length)},tt=(t,e,n)=>{if(!t.includes(n))return{};let s=t.indexOf(n)+n.length+1,r=e-2,a=t.substring(s,r);try{let o=JSON.parse(a);return console.log(`${n}`,o),o}catch(o){return console.error(`getComponentData - cannot parse ${a} from html:`,o.message),{}}},et=(t,e,n,s)=>{let r=require(t);r.default&&(r=r.default);let a=x.createElement(r,{data:e});try{if(!n.includes("provider"))return C(a);if(!s.store||!s.Provider)throw new Error(`You must provide a store and Provider for ${t}`);let{store:o,Provider:c}=s;return C(x.createElement(c,{store:o},a))}catch(o){return console.error("getComponenHtml - cannot renderToString:",o.message),""}},st=(t,e,n,s)=>{let r=e.substring(0,n+s),a=e.substring(n+s);return`${r}${t}${a}`},nt=async(t,e)=>{let n=await t.reduce(async(s,r)=>{let a=await s,o=await rt(r,e);return{...a,[r]:o}},Promise.resolve({}));await at(e,"galleries",JSON.stringify(n))},rt=async(t,e)=>{try{return(await D(`${e}/${t}`)).map(s=>({name:ot(s),path:`${t}/${s}`}))}catch(n){return console.error(`getGallery - cannot get files from ${t}:`,n.message),[]}},ot=t=>t.split("/").find((n,s,r)=>s===r.length-1).split(".").filter((n,s,r)=>s!==r.length-1).join("."),at=async(t,e,n)=>{try{let s=`${t}/${e||"galleries"}.data.json`;await A(s,n)}catch(s){console.error(`writeData - cannot write data ${e}:`,s.message)}};
